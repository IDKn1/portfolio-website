---
import BaseLayout from "./base.astro";
import { ArrowUpRight } from "@lucide/astro";
import { Image } from "astro:assets";
const {
  title,
  cover,
  content,
  scope,
  collaborators,
  project_link,
  project_color,
} = Astro.props;

const images = import.meta.glob("../../**/*.{png,jpg,jpeg,webp,svg}", {
  eager: true,
});

const coverImage = images[`../${cover}`]?.default;

if (!coverImage) {
  throw new Error(`Cover image not found: ${cover}`);
}
---

<BaseLayout title={title}>
  <div id="verticalContainer">
    <div class="left-section" id="left-section">
      <Image src={coverImage} alt="" id="project-cover" loading="eager" />
      <!-- This will be the container where we move images and video -->
    </div>

    <div class="right-section" id="right-section">
      <h1>{title}</h1>
      <div class="details">
        <p class="scope">{scope.join(" / ")}</p>
        {
          collaborators && collaborators.length > 0 && (
            <p class="collab">
              Made in collaboration with:{""}
              {collaborators.map((c, i) => (
                <>
                  <a
                    href={c.url}
                    class="underline-link"
                    target="_blank"
                    rel="noopener"
                  >
                    {c.name}
                  </a>
                  {i < collaborators.length - 1 ? ", " : ""}
                </>
              ))}
            </p>
          )
        }
        {
          project_link && project_link.url && (
            <h4 class="project-link">
              <a
                class="underline-link external-link"
                href={project_link.url}
                target="_blank"
                rel="noopener"
              >
                {project_link.name}
                <ArrowUpRight />
              </a>
            </h4>
          )
        }
      </div>
      <div class="project-copy">
        <slot />
      </div>
    </div>
    <div
      class="transition-cover"
      id="transition-cover"
      style={`background-color: ` + project_color + `;`}
    >
    </div>
  </div>
</BaseLayout>

<!-- 
This whole page is my favourite block of code  but specifically this script tag because the grind was way to long to figure it out and the payoff was rewarding 
 once I got the images to be parsed from the rendered markdown and got the bandaid fix script for the weird css issue I 
 then realized it wasn't working unless I refreshed the page first because of weird viewtransition stuff but I finally got it!
 I've had the paralax scroll code roughed out forever but I couldn't get the content to load in right to even see if my code works
 on to that now!
-->
<script>
  import initSplitScroll from "../../src/split-scroll.js";
  import pageWipe from "../../src/projectPageAnimations.js";

  function waitForImagesToLoad(images, callback) {
    let loaded = 0;
    const total = images.length;
    if (total === 0) return callback();

    images.forEach((img) => {
      if (img.complete) {
        loaded++;
        if (loaded === total) callback();
      } else {
        img.addEventListener("load", () => {
          loaded++;
          if (loaded === total) callback();
        });
        img.addEventListener("error", () => {
          loaded++;
          if (loaded === total) callback();
        });
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (window.innerWidth > 850) {
      const leftSection = document.querySelector(".left-section");
      const markdownImages = document.querySelectorAll("img");
      const videoWrappers = document.querySelectorAll(".video-wrapper"); // Select video-wrapper

      // Create a combined array of images and video wrappers
      const allElements = [...videoWrappers, ...markdownImages];

      // Move each element in order of appearance in the MDX content
      allElements.forEach((element) => {
        // Ensure element is moved only if it hasn't been moved yet
        if (!leftSection.contains(element)) {
          leftSection.appendChild(element);
        }

        // Apply styles to images (if it's an image)
        if (element.tagName.toLowerCase() === "img") {
          element.style.width = "100%";
          element.style.height = "auto";
          element.style.maxWidth = "100%";
          element.style.display = "block";
          element.style.objectFit = "cover";
        }
      });
      const allImages = document.querySelectorAll("img");
      setTimeout(() => {
        waitForImagesToLoad(allImages, () => {
          initSplitScroll(); // only after images are fully loaded
        });
      }, 100);
    }
  });
  requestAnimationFrame(() => {
    pageWipe();
  });
</script>
